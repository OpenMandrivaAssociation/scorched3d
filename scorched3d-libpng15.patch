--- src/common/image/ImagePngFactory.cpp.libpng	2011-11-06 09:48:54.631066973 -0600
+++ src/common/image/ImagePngFactory.cpp	2011-11-06 09:51:06.381811813 -0600
@@ -104,7 +104,7 @@
 
 static void user_png_error(png_structp png_ptr, png_const_charp msg) 
 {
-	longjmp(png_ptr->jmpbuf,1);
+	longjmp(png_jmpbuf(png_ptr),1);
 }
 
 static void user_png_warning(png_structp png_ptr, png_const_charp msg) 
--- src/client/client/LoadPNG.cpp.libpng	2010-08-15 18:26:36.000000000 -0500
+++ src/client/client/LoadPNG.cpp	2011-11-06 13:38:16.082076630 -0600
@@ -24,6 +24,8 @@
 	Uint32 Bmask;
 	Uint32 Amask;
 	SDL_Palette *palette;
+	int num_palette = 0;
+	png_colorp tmp_palette = NULL;
 	png_bytep *volatile row_pointers;
 	int row, i;
 	volatile int ckey = -1;
@@ -58,7 +60,7 @@
 	 * the normal method of doing things with libpng).  REQUIRED unless you
 	 * set up your own error handlers in png_create_read_struct() earlier.
 	 */
-	if ( setjmp(png_ptr->jmpbuf) ) {
+	if ( setjmp(png_jmpbuf(png_ptr)) ) {
 		error = "Error reading the PNG file.";
 		goto done;
 	}
@@ -127,9 +129,9 @@
 			Rmask = 0x000000FF;
 			Gmask = 0x0000FF00;
 			Bmask = 0x00FF0000;
-			Amask = (info_ptr->channels == 4) ? 0xFF000000 : 0;
+			Amask = (png_get_channels(png_ptr, info_ptr) == 4) ? 0xFF000000 : 0;
 		} else {
-		        int s = (info_ptr->channels == 4) ? 0 : 8;
+		        int s = (png_get_channels(png_ptr, info_ptr) == 4) ? 0 : 8;
 			Rmask = 0xFF000000 >> s;
 			Gmask = 0x00FF0000 >> s;
 			Bmask = 0x0000FF00 >> s;
@@ -137,7 +139,7 @@
 		}
 	}
 	surface = SDL_AllocSurface(SDL_SWSURFACE, width, height,
-			bit_depth*info_ptr->channels, Rmask,Gmask,Bmask,Amask);
+			bit_depth*png_get_channels(png_ptr, info_ptr), Rmask,Gmask,Bmask,Amask);
 	if ( surface == NULL ) {
 		error = "Out of memory";
 		goto done;
@@ -185,12 +187,15 @@
 		    palette->colors[i].g = i;
 		    palette->colors[i].b = i;
 		}
-	    } else if (info_ptr->num_palette > 0 ) {
-		palette->ncolors = info_ptr->num_palette; 
-		for( i=0; i<info_ptr->num_palette; ++i ) {
-		    palette->colors[i].b = info_ptr->palette[i].blue;
-		    palette->colors[i].g = info_ptr->palette[i].green;
-		    palette->colors[i].r = info_ptr->palette[i].red;
+	    } else {
+		png_get_PLTE(png_ptr, info_ptr, &tmp_palette, &num_palette);
+		if (num_palette > 0 ) {
+		    palette->ncolors = num_palette; 
+		    for( i=0; i<num_palette; ++i ) {
+	 		palette->colors[i].b = tmp_palette[i].blue;
+			palette->colors[i].g = tmp_palette[i].green;
+			palette->colors[i].r = tmp_palette[i].red;
+		    }
 		}
 	    }
 	}
